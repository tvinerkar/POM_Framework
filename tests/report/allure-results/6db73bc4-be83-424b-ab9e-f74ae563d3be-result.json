{"name": "test_open_homepage[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <POM_Framework.tests.test_randoim.TestMenuLinks object at 0x000001F4910BE530>\n\n    def test_open_homepage(self):\n        #self.driver = get_driver(\"chrome\")  # Ensure driver is initialized\n        self.navigation_page = NavigationPage(self.driver)\n        home = HomePage(self.driver)\n        self.driver.get(\"https://zodiaconline.com/\")\n        time.sleep(1)\n        home.capture_screenshot(self.test_name, \"01_HomePageLoaded\")\n    \n    \n>       self.navigation_page.click_new_arrivals()\n\ntest_randoim.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\menu_navigation_objects.py:64: in click_new_arrivals\n    self.new_arrivals_link.click()\n..\\pages\\menu_navigation_objects.py:17: in new_arrivals_link\n    return self.find_element((By.XPATH, \"//a[contains(text(),'NEW ARRIVALS')]\"))\n..\\pages\\menu_navigation_objects.py:13: in find_element\n    return self.wait.until(EC.element_to_be_clickable(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"058b5135996833f9c476f38bd9fd3bb8\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000001F4910F4AF0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException"}, "attachments": [{"name": "01_HomePageLoaded", "source": "ce72f491-b0da-4414-8f3b-ac1066228d0d-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "fb41d674-ebcb-432a-8b8d-5c744b4cad7c-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "driver", "value": "'chrome'"}], "start": 1742288898611, "stop": 1742288911672, "uuid": "93b22475-c641-4527-8a72-622c69b868a6", "historyId": "8ea28fc431111849b86ef8ba36d39acd", "testCaseId": "35584e3a63732212f881732b0499ef3b", "fullName": "tests.test_randoim.TestMenuLinks#test_open_homepage", "labels": [{"name": "story", "value": "Validate menu links journey"}, {"name": "feature", "value": "Validate menu links Feature"}, {"name": "tag", "value": "@pytest.mark.usefixtures('driver')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_randoim"}, {"name": "subSuite", "value": "TestMenuLinks"}, {"name": "host", "value": "BOMINA-NW10886"}, {"name": "thread", "value": "20496-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_randoim"}]}