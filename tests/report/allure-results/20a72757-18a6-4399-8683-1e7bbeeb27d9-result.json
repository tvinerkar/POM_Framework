{"name": "test_open_homepage[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: The result of the xpath expression \"//*[@id=\"idNew1\"]/ul/li[9]/a/text()\" is: [object Text]. It should be an element.\n  (Session info: chrome=134.0.6998.36); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nStacktrace:\n\tGetHandleVerifier [0x006CB5A3+24387]\n\t(No symbol) [0x00655904]\n\t(No symbol) [0x00530753]\n\t(No symbol) [0x00537137]\n\t(No symbol) [0x005393AA]\n\t(No symbol) [0x00539427]\n\t(No symbol) [0x00578431]\n\t(No symbol) [0x00578EFB]\n\t(No symbol) [0x005C19C2]\n\t(No symbol) [0x0059D894]\n\t(No symbol) [0x005BF138]\n\t(No symbol) [0x0059D646]\n\t(No symbol) [0x0056C59F]\n\t(No symbol) [0x0056D8E4]\n\tGetHandleVerifier [0x009CD883+3179043]\n\tGetHandleVerifier [0x009E6CF9+3282585]\n\tGetHandleVerifier [0x009E167C+3260444]\n\tGetHandleVerifier [0x00764330+650448]\n\t(No symbol) [0x0065ED0D]\n\t(No symbol) [0x0065BAF8]\n\t(No symbol) [0x0065BC99]\n\t(No symbol) [0x0064E530]\n\t(No symbol) [0x756F5D49]\n\tRtlInitializeExceptionChain [0x7705CE3B+107]\n\tRtlGetAppContainerNamedObjectPath [0x7705CDC1+561]", "trace": "self = <POM_Framework.tests.test_randoim.TestMenuLinks object at 0x000002640A3D55A0>\n\n    def test_open_homepage(self):\n        #self.driver = get_driver(\"chrome\")  # Ensure driver is initialized\n        self.navigation_page = NavigationPage(self.driver)\n        home = HomePage(self.driver)\n        self.driver.get(\"https://zodiaconline.com/\")\n    \n        home.capture_screenshot(self.test_name, \"01_HomePageLoaded\")\n    \n    \n        self.navigation_page.click_new_arrivals()\n        assert self.driver.current_url == \"https://www.zodiaconline.com/new-arrivals\"\n        time.sleep(1)\n        self.navigation_page.capture_screenshot(self.test_name, \"02_NewArrivals_page_Loaded\")\n    \n    \n        self.navigation_page.click_best_sellers()\n        assert self.driver.current_url == \"https://www.zodiaconline.com/best-sellers\"\n        time.sleep(1)\n        self.navigation_page.capture_screenshot(self.test_name, \"03_Best_sellers_page_Loaded\")\n    \n    \n>       self.navigation_page.hover_over_brands()\n\ntest_randoim.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\menu_navigation_objects.py:29: in hover_over_brands\n    brands_menu = self.find_element(self.BRANDS_LINK)\n..\\pages\\base_page.py:16: in find_element\n    return WebDriverWait(self.driver, 10).until(\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:110: in _predicate\n    return driver.find_element(*locator)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002640A3D45B0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"invalid selector: The result of the xpath ex...5D49]\\\\n\\\\tRtlInitializeExceptionChain [0x7705CE3B+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7705CDC1+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: The result of the xpath expression \"//*[@id=\"idNew1\"]/ul/li[9]/a/text()\" is: [object Text]. It should be an element.\nE         (Session info: chrome=134.0.6998.36); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x006CB5A3+24387]\nE       \t(No symbol) [0x00655904]\nE       \t(No symbol) [0x00530753]\nE       \t(No symbol) [0x00537137]\nE       \t(No symbol) [0x005393AA]\nE       \t(No symbol) [0x00539427]\nE       \t(No symbol) [0x00578431]\nE       \t(No symbol) [0x00578EFB]\nE       \t(No symbol) [0x005C19C2]\nE       \t(No symbol) [0x0059D894]\nE       \t(No symbol) [0x005BF138]\nE       \t(No symbol) [0x0059D646]\nE       \t(No symbol) [0x0056C59F]\nE       \t(No symbol) [0x0056D8E4]\nE       \tGetHandleVerifier [0x009CD883+3179043]\nE       \tGetHandleVerifier [0x009E6CF9+3282585]\nE       \tGetHandleVerifier [0x009E167C+3260444]\nE       \tGetHandleVerifier [0x00764330+650448]\nE       \t(No symbol) [0x0065ED0D]\nE       \t(No symbol) [0x0065BAF8]\nE       \t(No symbol) [0x0065BC99]\nE       \t(No symbol) [0x0064E530]\nE       \t(No symbol) [0x756F5D49]\nE       \tRtlInitializeExceptionChain [0x7705CE3B+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x7705CDC1+561]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSelectorException"}, "attachments": [{"name": "01_HomePageLoaded", "source": "acdaa4b7-dd5f-4525-91ae-666c973bf39f-attachment.png", "type": "image/png"}, {"name": "02_NewArrivals_page_Loaded", "source": "3d8c2c92-9a6f-4f7a-b157-e4ed5e3527fe-attachment.png", "type": "image/png"}, {"name": "03_Best_sellers_page_Loaded", "source": "35b3089a-dcbf-489c-a9a2-503030a54b81-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "4c60da6f-ae60-4ad9-9822-9320116333d9-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "driver", "value": "'chrome'"}], "start": 1742290622298, "stop": 1742290628780, "uuid": "08c83d95-0eea-43e1-85e7-6e2e7bfddcb9", "historyId": "8ea28fc431111849b86ef8ba36d39acd", "testCaseId": "35584e3a63732212f881732b0499ef3b", "fullName": "tests.test_randoim.TestMenuLinks#test_open_homepage", "labels": [{"name": "feature", "value": "Validate menu links Feature"}, {"name": "story", "value": "Validate menu links journey"}, {"name": "tag", "value": "@pytest.mark.usefixtures('driver')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_randoim"}, {"name": "subSuite", "value": "TestMenuLinks"}, {"name": "host", "value": "BOMINA-NW10886"}, {"name": "thread", "value": "26668-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_randoim"}]}