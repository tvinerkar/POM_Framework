{"name": "test_brands_subnav_links", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=134.0.6998.36)\nStacktrace:\n\tGetHandleVerifier [0x00007FF708A8FE45+26629]\n\t(No symbol) [0x00007FF7089F6010]\n\t(No symbol) [0x00007FF70888914C]\n\t(No symbol) [0x00007FF7088E0D24]\n\t(No symbol) [0x00007FF7088D28A4]\n\t(No symbol) [0x00007FF708907AAA]\n\t(No symbol) [0x00007FF7088D2156]\n\t(No symbol) [0x00007FF708907CC0]\n\t(No symbol) [0x00007FF708930169]\n\t(No symbol) [0x00007FF708907883]\n\t(No symbol) [0x00007FF7088D0550]\n\t(No symbol) [0x00007FF7088D1803]\n\tGetHandleVerifier [0x00007FF708DE72BD+3529853]\n\tGetHandleVerifier [0x00007FF708DFDA22+3621858]\n\tGetHandleVerifier [0x00007FF708DF24D3+3575443]\n\tGetHandleVerifier [0x00007FF708B5B77A+860474]\n\t(No symbol) [0x00007FF708A0088F]\n\t(No symbol) [0x00007FF7089FCBC4]\n\t(No symbol) [0x00007FF7089FCD66]\n\t(No symbol) [0x00007FF7089EC2C9]\n\t(No symbol) [0x00007FF960E1E8D7]\n\tRtlUserThreadStart [0x00007FF96179BF6C+44]", "trace": "self = <POM_Framework.tests.test_randoim.TestNavigation object at 0x000001D765E2B5B0>\n\n    def test_brands_subnav_links(self):\n        self.navigation_page.hover_over_brands()\n        subnav_links = self.navigation_page.brands_subnav.find_elements(By.TAG_NAME, \"a\")\n    \n        for link in subnav_links:\n            href = link.get_attribute(\"href\")\n>           link.click()\n\ntest_randoim.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D765E280A0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...bol) [0x00007FF7089EC2C9]\\\\n\\\\t(No symbol) [0x00007FF960E1E8D7]\\\\n\\\\tRtlUserThreadStart [0x00007FF96179BF6C+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=134.0.6998.36)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF708A8FE45+26629]\nE       \t(No symbol) [0x00007FF7089F6010]\nE       \t(No symbol) [0x00007FF70888914C]\nE       \t(No symbol) [0x00007FF7088E0D24]\nE       \t(No symbol) [0x00007FF7088D28A4]\nE       \t(No symbol) [0x00007FF708907AAA]\nE       \t(No symbol) [0x00007FF7088D2156]\nE       \t(No symbol) [0x00007FF708907CC0]\nE       \t(No symbol) [0x00007FF708930169]\nE       \t(No symbol) [0x00007FF708907883]\nE       \t(No symbol) [0x00007FF7088D0550]\nE       \t(No symbol) [0x00007FF7088D1803]\nE       \tGetHandleVerifier [0x00007FF708DE72BD+3529853]\nE       \tGetHandleVerifier [0x00007FF708DFDA22+3621858]\nE       \tGetHandleVerifier [0x00007FF708DF24D3+3575443]\nE       \tGetHandleVerifier [0x00007FF708B5B77A+860474]\nE       \t(No symbol) [0x00007FF708A0088F]\nE       \t(No symbol) [0x00007FF7089FCBC4]\nE       \t(No symbol) [0x00007FF7089FCD66]\nE       \t(No symbol) [0x00007FF7089EC2C9]\nE       \t(No symbol) [0x00007FF960E1E8D7]\nE       \tRtlUserThreadStart [0x00007FF96179BF6C+44]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException"}, "start": 1742283596058, "stop": 1742283596386, "uuid": "334b3849-2816-4cc0-b419-b49bf711ee52", "historyId": "6222b98dbabb67bb03d2429170b7be4e", "testCaseId": "6222b98dbabb67bb03d2429170b7be4e", "fullName": "tests.test_randoim.TestNavigation#test_brands_subnav_links", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_randoim"}, {"name": "subSuite", "value": "TestNavigation"}, {"name": "host", "value": "BOMINA-NW10886"}, {"name": "thread", "value": "3888-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_randoim"}]}