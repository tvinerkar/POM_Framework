{"name": "test_open_homepage[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=134.0.6998.36)\nStacktrace:\n\tGetHandleVerifier [0x0046B5A3+24387]\n\t(No symbol) [0x003F5904]\n\t(No symbol) [0x002D05CE]\n\t(No symbol) [0x00319CC4]\n\t(No symbol) [0x0030E6D5]\n\t(No symbol) [0x0033D84C]\n\t(No symbol) [0x0030E164]\n\t(No symbol) [0x0033DAC4]\n\t(No symbol) [0x0035F138]\n\t(No symbol) [0x0033D646]\n\t(No symbol) [0x0030C59F]\n\t(No symbol) [0x0030D8E4]\n\tGetHandleVerifier [0x0076D883+3179043]\n\tGetHandleVerifier [0x00786CF9+3282585]\n\tGetHandleVerifier [0x0078167C+3260444]\n\tGetHandleVerifier [0x00504330+650448]\n\t(No symbol) [0x003FED0D]\n\t(No symbol) [0x003FBAF8]\n\t(No symbol) [0x003FBC99]\n\t(No symbol) [0x003EE530]\n\t(No symbol) [0x756F5D49]\n\tRtlInitializeExceptionChain [0x7705CE3B+107]\n\tRtlGetAppContainerNamedObjectPath [0x7705CDC1+561]", "trace": "self = <POM_Framework.tests.test_randoim.TestMenuLinks object at 0x0000022E403B5900>\n\n    def test_open_homepage(self):\n        \"\"\"Test navigation menu links and validate correct page loads.\"\"\"\n        assert self.driver is not None, \"Driver is not initialized!\"\n    \n        navigation_page = NavigationPage(self.driver)\n        home = HomePage(self.driver)\n    \n        self.driver.get(\"https://www.zodiaconline.com/\")\n        home.capture_screenshot(self.test_name, \"01_HomePageLoaded\")\n>       self.driver.find_element(By.XPATH,\"//a[contains(text(),'NEW ARRIVALS')]\").click()\n\ntest_randoim.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022E403B7760>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...5D49]\\\\n\\\\tRtlInitializeExceptionChain [0x7705CE3B+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7705CDC1+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=134.0.6998.36)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0046B5A3+24387]\nE       \t(No symbol) [0x003F5904]\nE       \t(No symbol) [0x002D05CE]\nE       \t(No symbol) [0x00319CC4]\nE       \t(No symbol) [0x0030E6D5]\nE       \t(No symbol) [0x0033D84C]\nE       \t(No symbol) [0x0030E164]\nE       \t(No symbol) [0x0033DAC4]\nE       \t(No symbol) [0x0035F138]\nE       \t(No symbol) [0x0033D646]\nE       \t(No symbol) [0x0030C59F]\nE       \t(No symbol) [0x0030D8E4]\nE       \tGetHandleVerifier [0x0076D883+3179043]\nE       \tGetHandleVerifier [0x00786CF9+3282585]\nE       \tGetHandleVerifier [0x0078167C+3260444]\nE       \tGetHandleVerifier [0x00504330+650448]\nE       \t(No symbol) [0x003FED0D]\nE       \t(No symbol) [0x003FBAF8]\nE       \t(No symbol) [0x003FBC99]\nE       \t(No symbol) [0x003EE530]\nE       \t(No symbol) [0x756F5D49]\nE       \tRtlInitializeExceptionChain [0x7705CE3B+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x7705CDC1+561]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException"}, "description": "Test navigation menu links and validate correct page loads.", "attachments": [{"name": "01_HomePageLoaded", "source": "949b924a-9a9b-4996-9e5b-7d248a68b912-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "b1964e4d-da3e-417c-9eac-80b3610225bc-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "driver", "value": "'chrome'"}], "start": 1742289538543, "stop": 1742289550112, "uuid": "a97a1e20-c9bf-44ce-93f0-2152de1373fa", "historyId": "8ea28fc431111849b86ef8ba36d39acd", "testCaseId": "35584e3a63732212f881732b0499ef3b", "fullName": "tests.test_randoim.TestMenuLinks#test_open_homepage", "labels": [{"name": "feature", "value": "Validate Menu Links Feature"}, {"name": "story", "value": "Validate Menu Links Journey"}, {"name": "tag", "value": "@pytest.mark.usefixtures('driver')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_randoim"}, {"name": "subSuite", "value": "TestMenuLinks"}, {"name": "host", "value": "BOMINA-NW10886"}, {"name": "thread", "value": "24696-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_randoim"}]}